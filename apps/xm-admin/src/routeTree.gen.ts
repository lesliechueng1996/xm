/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteRouteImport } from './routes/login/route'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedUsersIndexRouteImport } from './routes/_authenticated/users/index'
import { Route as AuthenticatedRolesIndexRouteImport } from './routes/_authenticated/roles/index'
import { Route as AuthenticatedAccessIndexRouteImport } from './routes/_authenticated/access/index'
import { Route as AuthenticatedUsersAddRouteImport } from './routes/_authenticated/users/add'
import { Route as AuthenticatedUsersUserIdRouteImport } from './routes/_authenticated/users/$userId'
import { Route as AuthenticatedRolesAddRouteImport } from './routes/_authenticated/roles/add'
import { Route as AuthenticatedRolesRoleIdRouteImport } from './routes/_authenticated/roles/$roleId'
import { Route as AuthenticatedAccessAddRouteImport } from './routes/_authenticated/access/add'

const LoginRouteRoute = LoginRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedUsersIndexRoute = AuthenticatedUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedRolesIndexRoute = AuthenticatedRolesIndexRouteImport.update({
  id: '/roles/',
  path: '/roles/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedAccessIndexRoute =
  AuthenticatedAccessIndexRouteImport.update({
    id: '/access/',
    path: '/access/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedUsersAddRoute = AuthenticatedUsersAddRouteImport.update({
  id: '/users/add',
  path: '/users/add',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedUsersUserIdRoute =
  AuthenticatedUsersUserIdRouteImport.update({
    id: '/users/$userId',
    path: '/users/$userId',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedRolesAddRoute = AuthenticatedRolesAddRouteImport.update({
  id: '/roles/add',
  path: '/roles/add',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedRolesRoleIdRoute =
  AuthenticatedRolesRoleIdRouteImport.update({
    id: '/roles/$roleId',
    path: '/roles/$roleId',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedAccessAddRoute = AuthenticatedAccessAddRouteImport.update({
  id: '/access/add',
  path: '/access/add',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRouteRoute
  '/': typeof AuthenticatedIndexRoute
  '/access/add': typeof AuthenticatedAccessAddRoute
  '/roles/$roleId': typeof AuthenticatedRolesRoleIdRoute
  '/roles/add': typeof AuthenticatedRolesAddRoute
  '/users/$userId': typeof AuthenticatedUsersUserIdRoute
  '/users/add': typeof AuthenticatedUsersAddRoute
  '/access': typeof AuthenticatedAccessIndexRoute
  '/roles': typeof AuthenticatedRolesIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRouteRoute
  '/': typeof AuthenticatedIndexRoute
  '/access/add': typeof AuthenticatedAccessAddRoute
  '/roles/$roleId': typeof AuthenticatedRolesRoleIdRoute
  '/roles/add': typeof AuthenticatedRolesAddRoute
  '/users/$userId': typeof AuthenticatedUsersUserIdRoute
  '/users/add': typeof AuthenticatedUsersAddRoute
  '/access': typeof AuthenticatedAccessIndexRoute
  '/roles': typeof AuthenticatedRolesIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/login': typeof LoginRouteRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/access/add': typeof AuthenticatedAccessAddRoute
  '/_authenticated/roles/$roleId': typeof AuthenticatedRolesRoleIdRoute
  '/_authenticated/roles/add': typeof AuthenticatedRolesAddRoute
  '/_authenticated/users/$userId': typeof AuthenticatedUsersUserIdRoute
  '/_authenticated/users/add': typeof AuthenticatedUsersAddRoute
  '/_authenticated/access/': typeof AuthenticatedAccessIndexRoute
  '/_authenticated/roles/': typeof AuthenticatedRolesIndexRoute
  '/_authenticated/users/': typeof AuthenticatedUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/'
    | '/access/add'
    | '/roles/$roleId'
    | '/roles/add'
    | '/users/$userId'
    | '/users/add'
    | '/access'
    | '/roles'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/'
    | '/access/add'
    | '/roles/$roleId'
    | '/roles/add'
    | '/users/$userId'
    | '/users/add'
    | '/access'
    | '/roles'
    | '/users'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/'
    | '/_authenticated/access/add'
    | '/_authenticated/roles/$roleId'
    | '/_authenticated/roles/add'
    | '/_authenticated/users/$userId'
    | '/_authenticated/users/add'
    | '/_authenticated/access/'
    | '/_authenticated/roles/'
    | '/_authenticated/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  LoginRouteRoute: typeof LoginRouteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/users/': {
      id: '/_authenticated/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/roles/': {
      id: '/_authenticated/roles/'
      path: '/roles'
      fullPath: '/roles'
      preLoaderRoute: typeof AuthenticatedRolesIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/access/': {
      id: '/_authenticated/access/'
      path: '/access'
      fullPath: '/access'
      preLoaderRoute: typeof AuthenticatedAccessIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/users/add': {
      id: '/_authenticated/users/add'
      path: '/users/add'
      fullPath: '/users/add'
      preLoaderRoute: typeof AuthenticatedUsersAddRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/users/$userId': {
      id: '/_authenticated/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AuthenticatedUsersUserIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/roles/add': {
      id: '/_authenticated/roles/add'
      path: '/roles/add'
      fullPath: '/roles/add'
      preLoaderRoute: typeof AuthenticatedRolesAddRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/roles/$roleId': {
      id: '/_authenticated/roles/$roleId'
      path: '/roles/$roleId'
      fullPath: '/roles/$roleId'
      preLoaderRoute: typeof AuthenticatedRolesRoleIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/access/add': {
      id: '/_authenticated/access/add'
      path: '/access/add'
      fullPath: '/access/add'
      preLoaderRoute: typeof AuthenticatedAccessAddRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedAccessAddRoute: typeof AuthenticatedAccessAddRoute
  AuthenticatedRolesRoleIdRoute: typeof AuthenticatedRolesRoleIdRoute
  AuthenticatedRolesAddRoute: typeof AuthenticatedRolesAddRoute
  AuthenticatedUsersUserIdRoute: typeof AuthenticatedUsersUserIdRoute
  AuthenticatedUsersAddRoute: typeof AuthenticatedUsersAddRoute
  AuthenticatedAccessIndexRoute: typeof AuthenticatedAccessIndexRoute
  AuthenticatedRolesIndexRoute: typeof AuthenticatedRolesIndexRoute
  AuthenticatedUsersIndexRoute: typeof AuthenticatedUsersIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedAccessAddRoute: AuthenticatedAccessAddRoute,
  AuthenticatedRolesRoleIdRoute: AuthenticatedRolesRoleIdRoute,
  AuthenticatedRolesAddRoute: AuthenticatedRolesAddRoute,
  AuthenticatedUsersUserIdRoute: AuthenticatedUsersUserIdRoute,
  AuthenticatedUsersAddRoute: AuthenticatedUsersAddRoute,
  AuthenticatedAccessIndexRoute: AuthenticatedAccessIndexRoute,
  AuthenticatedRolesIndexRoute: AuthenticatedRolesIndexRoute,
  AuthenticatedUsersIndexRoute: AuthenticatedUsersIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  LoginRouteRoute: LoginRouteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

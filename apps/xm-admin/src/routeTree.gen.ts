/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteRouteImport } from './routes/login/route'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedRolesIndexRouteImport } from './routes/_authenticated/roles/index'
import { Route as AuthenticatedRolesAddRouteImport } from './routes/_authenticated/roles/add'
import { Route as AuthenticatedRolesRoleIdRouteImport } from './routes/_authenticated/roles/$roleId'

const LoginRouteRoute = LoginRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedRolesIndexRoute = AuthenticatedRolesIndexRouteImport.update({
  id: '/roles/',
  path: '/roles/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedRolesAddRoute = AuthenticatedRolesAddRouteImport.update({
  id: '/roles/add',
  path: '/roles/add',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedRolesRoleIdRoute =
  AuthenticatedRolesRoleIdRouteImport.update({
    id: '/roles/$roleId',
    path: '/roles/$roleId',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRouteRoute
  '/': typeof AuthenticatedIndexRoute
  '/roles/$roleId': typeof AuthenticatedRolesRoleIdRoute
  '/roles/add': typeof AuthenticatedRolesAddRoute
  '/roles': typeof AuthenticatedRolesIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRouteRoute
  '/': typeof AuthenticatedIndexRoute
  '/roles/$roleId': typeof AuthenticatedRolesRoleIdRoute
  '/roles/add': typeof AuthenticatedRolesAddRoute
  '/roles': typeof AuthenticatedRolesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/login': typeof LoginRouteRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/roles/$roleId': typeof AuthenticatedRolesRoleIdRoute
  '/_authenticated/roles/add': typeof AuthenticatedRolesAddRoute
  '/_authenticated/roles/': typeof AuthenticatedRolesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/' | '/roles/$roleId' | '/roles/add' | '/roles'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/' | '/roles/$roleId' | '/roles/add' | '/roles'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/'
    | '/_authenticated/roles/$roleId'
    | '/_authenticated/roles/add'
    | '/_authenticated/roles/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  LoginRouteRoute: typeof LoginRouteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/roles/': {
      id: '/_authenticated/roles/'
      path: '/roles'
      fullPath: '/roles'
      preLoaderRoute: typeof AuthenticatedRolesIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/roles/add': {
      id: '/_authenticated/roles/add'
      path: '/roles/add'
      fullPath: '/roles/add'
      preLoaderRoute: typeof AuthenticatedRolesAddRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/roles/$roleId': {
      id: '/_authenticated/roles/$roleId'
      path: '/roles/$roleId'
      fullPath: '/roles/$roleId'
      preLoaderRoute: typeof AuthenticatedRolesRoleIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedRolesRoleIdRoute: typeof AuthenticatedRolesRoleIdRoute
  AuthenticatedRolesAddRoute: typeof AuthenticatedRolesAddRoute
  AuthenticatedRolesIndexRoute: typeof AuthenticatedRolesIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedRolesRoleIdRoute: AuthenticatedRolesRoleIdRoute,
  AuthenticatedRolesAddRoute: AuthenticatedRolesAddRoute,
  AuthenticatedRolesIndexRoute: AuthenticatedRolesIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  LoginRouteRoute: LoginRouteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
